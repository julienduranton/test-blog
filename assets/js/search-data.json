{
  
    
        "post0": {
            "title": "Title",
            "content": "Test of Altair interactive graphs . Graphs by country . source = data.iowa_electricity() alt.Chart(source).mark_bar(opacity=0.7).encode( x=&#39;year:O&#39;, y=alt.Y(&#39;net_generation:Q&#39;, stack=None), color=&quot;source&quot;, ) . source . year source net_generation . 0 2001-01-01 | Fossil Fuels | 35361 | . 1 2002-01-01 | Fossil Fuels | 35991 | . 2 2003-01-01 | Fossil Fuels | 36234 | . 3 2004-01-01 | Fossil Fuels | 36205 | . 4 2005-01-01 | Fossil Fuels | 36883 | . 5 2006-01-01 | Fossil Fuels | 37014 | . 6 2007-01-01 | Fossil Fuels | 41389 | . 7 2008-01-01 | Fossil Fuels | 42734 | . 8 2009-01-01 | Fossil Fuels | 38620 | . 9 2010-01-01 | Fossil Fuels | 42750 | . 10 2011-01-01 | Fossil Fuels | 39361 | . 11 2012-01-01 | Fossil Fuels | 37379 | . 12 2013-01-01 | Fossil Fuels | 34873 | . 13 2014-01-01 | Fossil Fuels | 35250 | . 14 2015-01-01 | Fossil Fuels | 32319 | . 15 2016-01-01 | Fossil Fuels | 28437 | . 16 2017-01-01 | Fossil Fuels | 29329 | . 17 2001-01-01 | Nuclear Energy | 3853 | . 18 2002-01-01 | Nuclear Energy | 4574 | . 19 2003-01-01 | Nuclear Energy | 3988 | . 20 2004-01-01 | Nuclear Energy | 4929 | . 21 2005-01-01 | Nuclear Energy | 4538 | . 22 2006-01-01 | Nuclear Energy | 5095 | . 23 2007-01-01 | Nuclear Energy | 4519 | . 24 2008-01-01 | Nuclear Energy | 5282 | . 25 2009-01-01 | Nuclear Energy | 4679 | . 26 2010-01-01 | Nuclear Energy | 4451 | . 27 2011-01-01 | Nuclear Energy | 5215 | . 28 2012-01-01 | Nuclear Energy | 4347 | . 29 2013-01-01 | Nuclear Energy | 5321 | . 30 2014-01-01 | Nuclear Energy | 4152 | . 31 2015-01-01 | Nuclear Energy | 5243 | . 32 2016-01-01 | Nuclear Energy | 4703 | . 33 2017-01-01 | Nuclear Energy | 5214 | . 34 2001-01-01 | Renewables | 1437 | . 35 2002-01-01 | Renewables | 1963 | . 36 2003-01-01 | Renewables | 1885 | . 37 2004-01-01 | Renewables | 2102 | . 38 2005-01-01 | Renewables | 2724 | . 39 2006-01-01 | Renewables | 3364 | . 40 2007-01-01 | Renewables | 3870 | . 41 2008-01-01 | Renewables | 5070 | . 42 2009-01-01 | Renewables | 8560 | . 43 2010-01-01 | Renewables | 10308 | . 44 2011-01-01 | Renewables | 11795 | . 45 2012-01-01 | Renewables | 14949 | . 46 2013-01-01 | Renewables | 16476 | . 47 2014-01-01 | Renewables | 17452 | . 48 2015-01-01 | Renewables | 19091 | . 49 2016-01-01 | Renewables | 21241 | . 50 2017-01-01 | Renewables | 21933 | .",
            "url": "https://julienduranton.github.io/test-blog/2020/04/03/test_graphs.html",
            "relUrl": "/2020/04/03/test_graphs.html",
            "date": " • Apr 3, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "Test of Altair interactive graphs . Graphs by country . alt.data_transformers.disable_max_rows() # Define the 3 Charts chart_1 = alt.Chart(data_indicators, width=300, height=300).mark_bar(opacity=.50).transform_filter( alt.FieldOneOfPredicate( field=&#39;indicators&#39;, oneOf=[&#39;s&#39;,&#39;beta&#39;])).encode( x=&#39;Name:N&#39;, y=alt.Y(&#39;value:Q&#39;,stack=None), color=alt.Color(&#39;indicators&#39;, scale=alt.Scale(domain=[&#39;beta&#39;,&#39;s&#39;], range=[&#39;red&#39;,&#39;blue&#39;]))) chart_2 = alt.Chart(data_markups, width=300, height=300).mark_point().encode( x=&#39;markups:Q&#39;, y=&#39;markups_supplier:Q&#39;, tooltip=[&#39;Name&#39;, &#39;country&#39;, &#39;markups&#39;, &#39;markups_supplier&#39;]) chart_3 = alt.Chart(data_flows,width = 600, height = 600).mark_rect().encode( x=&#39;suppliers:N&#39;, y=&#39;Name:N&#39;, color = &#39;value:Q&#39;, tooltip=[&#39;value&#39;]) # Define the Country Dropdown country_dropdown = alt.binding_select(options=data_renamed.country.unique()) country_select = alt.selection_single(fields=[&#39;country&#39;], bind=country_dropdown, name=&#39;Select&#39;) # Define interactive charts filter_chart_1 = chart_1.add_selection( country_select ).transform_filter( country_select ).properties(title=&quot;Impact of each Sector by country&quot;) filter_chart_2 = chart_2.add_selection( country_select ).transform_filter( country_select ).properties(title=&quot;Markups by country&quot;) filter_chart_3 = chart_3.add_selection( country_select ).transform_filter( country_select ).properties(title=&quot;I/O parameters by country&quot;) # Display charts (filter_chart_1 | filter_chart_2) &amp; (filter_chart_3) . data_flows . country Name suppliers value . 0 AUS | Agriculture, Hunting, Forestry and Fishing | Agriculture, Hunting, Forestry and Fishing | 0.252750 | . 1 AUS | Mining and Quarrying | Agriculture, Hunting, Forestry and Fishing | 0.001230 | . 2 AUS | Food, Beverages and Tobacco | Agriculture, Hunting, Forestry and Fishing | 0.337064 | . 3 AUS | Textiles and Textile Products | Agriculture, Hunting, Forestry and Fishing | 0.175253 | . 4 AUS | Leather, Leather and Footwear | Agriculture, Hunting, Forestry and Fishing | 0.150525 | . ... ... | ... | ... | ... | . 33295 USA | Other Supporting and Auxiliary Transport Activ... | Renting of M&amp;Eq and Other Business Activities | 0.242712 | . 33296 USA | Post and Telecommunications | Renting of M&amp;Eq and Other Business Activities | 0.276128 | . 33297 USA | Financial Intermediation | Renting of M&amp;Eq and Other Business Activities | 0.261084 | . 33298 USA | Real Estate Activities | Renting of M&amp;Eq and Other Business Activities | 0.171947 | . 33299 USA | Renting of M&amp;Eq and Other Business Activities | Renting of M&amp;Eq and Other Business Activities | 0.414322 | . 33300 rows × 4 columns . data_indicators . country Name indicators value . 0 AUS | Agriculture, Hunting, Forestry and Fishing | beta | 0.037056 | . 1 AUS | Mining and Quarrying | beta | 0.056010 | . 2 AUS | Food, Beverages and Tobacco | beta | 0.071822 | . 3 AUS | Textiles and Textile Products | beta | 0.009246 | . 4 AUS | Leather, Leather and Footwear | beta | 0.001927 | . ... ... | ... | ... | ... | . 6655 USA | Other Supporting and Auxiliary Transport Activ... | xshare | 0.295707 | . 6656 USA | Post and Telecommunications | xshare | 0.361224 | . 6657 USA | Financial Intermediation | xshare | 0.416224 | . 6658 USA | Real Estate Activities | xshare | 0.252908 | . 6659 USA | Renting of M&amp;Eq and Other Business Activities | xshare | 0.320387 | . 6660 rows × 4 columns .",
            "url": "https://julienduranton.github.io/test-blog/2020/04/03/test_data.html",
            "relUrl": "/2020/04/03/test_data.html",
            "date": " • Apr 3, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://julienduranton.github.io/test-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://julienduranton.github.io/test-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://julienduranton.github.io/test-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}